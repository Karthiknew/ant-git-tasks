<?xml version="1.0" encoding="UTF-8"?>
<!--
Copyright 2013-2015 Rimero Solutions

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<project basedir="../../../"
         xmlns:au="antlib:org.apache.ant.antunit"
         xmlns:git="antlib:com.rimerosolutions.ant.git"
         xmlns="antlib:org.apache.tools.ant">

        <taskdef uri="antlib:com.rimerosolutions.ant.git"
                 resource="com/rimerosolutions/ant/git/jgit-ant-lib.xml">
                <classpath>
                        <path refid="compile.classpath"/>
                        <path refid="classes.location"/>
                </classpath>
        </taskdef>

        <pathconvert property="testData.folder" refid="testData.location"/>
        <property name="dummy.patch.file" value="${testData.folder}/data-patch.txt"/>
        <property name="branchlist.file" value="${testData.folder}/branch-list.txt"/>
        <property name="branchlist.file.baseline" value="${testData.folder}/branch-list-baseline.txt"/>
        <property name="taglist.file" value="${testData.folder}/tag-list.txt"/>
        <property name="taglist.file.baseline" value="${testData.folder}/tag-list-baseline.txt"/>
        <property name="testLocalRepo" value="${testData.folder}/testLocalRepo"/>
        <property name="testLocalRepoClient" value="${testData.folder}/testLocalRepoClient"/>
        <property name="testLocalRepoClone" value="${testData.folder}/testLocalRepoClone"/>
        <property name="dummy.commit.message" value="Initial commit"/>
        <property name="dummy.checkout.branch" value="feature/checkout"/>
        <property name="tree.modified.property" value="treeModified"/>
        <property name="dummy.tag.name" value="dummytag"/>
        <property name="master.branch.name" value="master"/>
        <property name="tomerge.branch.name" value="tomerge"/>

        <!-- ****************************************** -->
        <!-- Test lifecycle -->
        <!-- ****************************************** -->
        <target name="setUp">
                <mkdir dir="${testLocalRepo}"/>
                <mkdir dir="${testLocalRepoClone}"/>
                <mkdir dir="${testLocalRepoClient}"/>
        </target>

        <target name="tearDown">
                <delete dir="${testLocalRepo}" quiet="true"/>
                <delete dir="${testLocalRepoClone}" quiet="true"/>
                <delete dir="${testLocalRepoClient}" quiet="true"/>
                <delete file="${branchlist.file}" quiet="true"/>
                <delete file="${taglist.file}" quiet="true"/>
        </target>

        <macrodef name="initLocalRepo" description="Macro to ensure good setUp-tearDown behavior">
                <sequential>
                        <git:settings refId="git.testing"
                                      username="xxxtesting"
                                      password="xxxtesting"
                                      name="xxxtesting"
                                      email="xxxtesting@gmail.com"/>

                        <git:git directory="${testLocalRepo}" settingsRef="git.testing">
                                <git:init/>
                                <git:commit message="${dummy.commit.message}"
                                            revCommitIdProperty="revcommit"/>
                        </git:git>
                </sequential>
        </macrodef>

        <macrodef name="initLocalRepoBare" description="Macro to ensure good setUp-tearDown behavior">
                <sequential>
                        <git:settings refId="git.testing"
                                      username="xxxtesting"
                                      password="xxxtesting"
                                      name="xxxtesting"
                                      email="xxxtesting@gmail.com"/>

                        <git:git directory="${testLocalRepo}" settingsRef="git.testing">
                                <git:init bare="true" directory="${testLocalRepo}"/>
                        </git:git>
                </sequential>
        </macrodef>

        <!-- ****************************************** -->
        <!-- Tags -->
        <!-- ****************************************** -->
        <target name="testTagDelete" description="Test git-tag-delete">
                <initLocalRepo/>

                <git:git directory="${testLocalRepo}" verbose="true" settingsRef="git.testing">
                        <git:tag name="${dummy.tag.name}"/>
                        <git:tagdelete tags="${dummy.tag.name}"/>
                </git:git>

                <au:expectfailure>
                        <git:git directory="${testLocalRepo}" verbose="true">
                                <git:taglist verifycontainnames="${dummy.tag.name}"
                                             failonerror="true"/>
                        </git:git>
                </au:expectfailure>
        </target>

        <target name="testTagAdd" description="Test git-tag-add">
                <initLocalRepo/>

                <git:git directory="${testLocalRepo}" verbose="true" settingsRef="git.testing">
                        <git:tag name="${dummy.tag.name}"/>
                        <git:taglist outputfilename="${taglist.file}"
                                     verifycontainnames="${dummy.tag.name}"
                                     failonerror="true"/>
                </git:git>
        </target>

        <target name="testTagList" description="Test git-tag-list">
                <initLocalRepo/>

                <git:git directory="${testLocalRepo}" verbose="true" settingsRef="git.testing">
                        <git:tag name="${dummy.tag.name}"/>
                        <git:taglist outputfilename="${taglist.file}"
                                     failonerror="true"/>
                </git:git>

                <au:assertFileExists file="${taglist.file}"/>

                <au:assertResourceContains resource="${taglist.file.baseline}"
                                           value="${dummy.tag.name}"
                                           message="Cannot find tag ${dummy.tag.name} in tag list baseline"/>

                <au:assertResourceContains resource="${taglist.file}"
                                           value="${dummy.tag.name}"
                                           message="Cannot find tag ${dummy.tag.name} in tag list dump"/>

                <au:assertFilesMatch expected="${taglist.file.baseline}"
                                     actual="${taglist.file}"
                                     message="Tags list doesn't match baseline"/>
        </target>

        <!-- ****************************************** -->
        <!-- Branches -->
        <!-- ****************************************** -->
        <target name="testBranch" description="Test git-branch">
                <initLocalRepo/>

                <git:git directory="${testLocalRepo}" verbose="true">
                        <git:branch branchName="${dummy.checkout.branch}"/>
                        <git:branchlist  verifycontainnames="${dummy.checkout.branch}"
                                         outputfilename="${branchlist.file}"
                                         failonerror="true"/>
                </git:git>
        </target>

        <target name="testCurrentBranch" description="Test git-currentbranch">
                <initLocalRepo/>

                <git:git directory="${testLocalRepo}" verbose="true">
                        <git:checkout branchName="${dummy.checkout.branch}" createBranch="true"/>
                        <git:currentbranch outputProperty="currentBranchName"/>
                </git:git>

                <au:assertEquals expected="${dummy.checkout.branch}" actual="${currentBranchName}"/>
        </target>


        <target name="testBranchFromTag" description="Test branch from tag">
                <initLocalRepo/>
                <git:git directory="${testLocalRepo}" verbose="true">
                        <git:checkout branchName="${dummy.checkout.branch}" createBranch="true"/>
                </git:git>

                <echo file="${testLocalRepo}/test.txt" message="test"/>
                <git:git directory="${testLocalRepo}" verbose="true">
                        <git:add>
                                <fileset dir="${testLocalRepo}" includes="*.txt"/>
                        </git:add>
                        <git:commit message="${dummy.commit.message}" settingsRef="git.testing"/>
                        <git:checkout branchName="${master.branch.name}"/>
                </git:git>

                <au:expectfailure>
                        <au:assertFileExists file="${testLocalRepo}/test.txt"/>
                </au:expectfailure>

                <git:git directory="${testLocalRepo}" verbose="true">
                        <git:checkout branchName="${dummy.checkout.branch}" startPoint="${dummy.checkout.branch}"/>
                </git:git>

                <au:assertFileExists file="${testLocalRepo}/test.txt"/>

        </target>

        <target name="testBranchDelete" description="Test git-branch-delete">
                <initLocalRepo/>

                <au:expectfailure>
                        <git:git directory="${testLocalRepo}" verbose="true">
                                <git:checkout branchName="${dummy.checkout.branch}"
                                              createBranch="true"/>
                                <git:branchDelete failonerror="true" branches="${dummy.checkout.branch}"/>
                        </git:git>
                </au:expectfailure>

                <git:git directory="${testLocalRepo}" verbose="true">
                        <git:checkout branchName="${master.branch.name}"/>
                        <git:branchDelete failonerror="true" branches="${dummy.checkout.branch}"/>
                </git:git>
        </target>

        <target name="testBranchList" description="Test git-branch-list">
                <initLocalRepo/>

                <git:git directory="${testLocalRepo}" verbose="true">
                        <git:checkout branchName="${dummy.checkout.branch}" createBranch="true"/>
                        <git:branchlist outputfilename="${branchlist.file}"/>
                </git:git>

                <au:assertFileExists file="${branchlist.file}"/>

                <au:assertResourceContains resource="${branchlist.file.baseline}"
                                           value="${dummy.checkout.branch}"
                                           message="Cannot find branch ${dummy.checkout.branch} in branch list baseline"/>

                <au:assertResourceContains resource="${branchlist.file}"
                                           value="${dummy.checkout.branch}"
                                           message="Cannot find branch ${dummy.checkout.branch} in branch list dump"/>

                <au:assertFilesMatch expected="${branchlist.file.baseline}"
                                     actual="${branchlist.file}"
                                     message="Branches list doesn't match baseline"/>
        </target>

        <!-- ****************************************** -->
        <!-- Others -->
        <!-- ****************************************** -->
        <!-- git-merge -->
        <target name="testMerge" description="Test git-merge">
                <initLocalRepo/>

                <!-- create a first branch with one file -->
                <git:git directory="${testLocalRepo}" verbose="true">
                        <git:checkout
                            branchName="${dummy.checkout.branch}"
                            createBranch="true"/>
                </git:git>

                <echo file="${testLocalRepo}/test.txt" message="test"/>
                <git:git directory="${testLocalRepo}" verbose="true">
                        <git:add>
                                <fileset dir="${testLocalRepo}" includes="*.txt"/>
                        </git:add>
                        <git:commit message="${dummy.commit.message}" settingsRef="git.testing"/>
                </git:git>

                <!-- create a second branch with one file from master -->
                <git:git directory="${testLocalRepo}" verbose="true">
                        <git:checkout
                            branchName="${master.branch.name}"
                            createBranch="false"/>
                        <git:checkout
                            branchName="${tomerge.branch.name}"
                            createBranch="true"/>
                </git:git>

                <echo file="${testLocalRepo}/test1.txt" message="test1"/>
                <git:git directory="${testLocalRepo}" verbose="true">
                        <git:add>
                                <fileset dir="${testLocalRepo}" includes="*.txt"/>
                        </git:add>
                        <git:commit
                            message="${dummy.commit.message}"
                            settingsRef="git.testing"/>
                </git:git>

                <!-- merge from the second branch into the first branch -->
                <git:git directory="${testLocalRepo}" verbose="true">
                        <git:checkout
                            branchName="${dummy.checkout.branch}"
                            createBranch="false"/>
                        <git:merge branchname="${tomerge.branch.name}"/>
                </git:git>

		<!-- we expect 2 text files -->
		<au:assertFileExists file="${testLocalRepo}/test.txt"/>
		<au:assertFileExists file="${testLocalRepo}/test1.txt"/>
        </target>

        <!-- git-checkout -->
        <target name="testCheckout" description="Test git-checkout">
                <initLocalRepo/>

                <git:git directory="${testLocalRepo}" verbose="true">
                        <git:checkout branchName="${dummy.checkout.branch}" createBranch="true"/>
                        <git:branchlist  verifycontainnames="${dummy.checkout.branch}"
                                         outputfilename="${branchlist.file}"
                                         failonerror="true"/>
                </git:git>
        </target>

        <!-- git-clone -->
        <target name="testClone" description="Test git-clone">
                <initLocalRepo/>

                <git:git directory="${testLocalRepoClone}" verbose="true">
                        <git:clone uri="file://${testLocalRepo}/.git" directory="${testLocalRepoClone}"/>
                </git:git>

                <au:assertFileExists file="${testLocalRepoClone}/.git/index"/>
        </target>

        <!-- git-push -->
        <target name="testPush" description="Test git-push">
                <initLocalRepoBare/>

                <git:git directory="${testLocalRepoClone}" verbose="true">
                        <git:clone uri="file://${testLocalRepo}" directory="${testLocalRepoClone}"/>
                </git:git>

                <echo file="${testLocalRepoClone}/test.txt" message="test"/>

                <git:git directory="${testLocalRepoClone}" verbose="true" settingsRef="git.testing">
                        <git:add>
                                <fileset dir="${testLocalRepoClone}" includes="*.txt"/>
                        </git:add>
                        <git:commit message="${dummy.commit.message}"/>
                        <git:uptodate failOnError="true"/>
                        <git:push uri="file://${testLocalRepo}"/>
                </git:git>

                <git:git directory="${testLocalRepoClient}" verbose="true" settingsRef="git.testing">
                        <git:clone uri="file://${testLocalRepo}"/>
                </git:git>

                <au:assertFileExists file="${testLocalRepoClient}/test.txt"/>
        </target>

        <!-- git-fetch -->
        <target name="testFetch" description="Test git-fetch">
                <initLocalRepoBare/>

                <git:git directory="${testLocalRepoClone}" verbose="true">
                        <git:clone uri="file://${testLocalRepo}"/>
                </git:git>

                <echo file="${testLocalRepoClone}/test.txt" message="test"/>

                <git:git directory="${testLocalRepoClone}" verbose="true" settingsRef="git.testing">
                        <git:add>
                                <fileset dir="${testLocalRepoClone}" includes="*.txt"/>
                        </git:add>
                        <git:commit message="${dummy.commit.message}"/>
                        <git:uptodate failOnError="true"/>
                        <git:push uri="file://${testLocalRepo}"/>
                </git:git>

                <git:git directory="${testLocalRepoClient}" verbose="true" settingsRef="git.testing">
                        <git:init directory="${testLocalRepoClient}"/>
                        <git:fetch uri="file://${testLocalRepo}" directory="${testLocalRepoClient}"/>
                        <git:pull/>
                </git:git>

                <au:assertFileExists file="${testLocalRepoClient}/test.txt"/>
        </target>

        <!-- git-rm -->
        <target name="testRm" description="Test git-rm">
                <initLocalRepo/>
                <echo file="${testLocalRepo}/test.txt" message="test"/>

                <git:git directory="${testLocalRepo}" verbose="true" settingsRef="git.testing">
                        <git:add>
                                <fileset dir="${testLocalRepo}" includes="*.txt"/>
                        </git:add>
                        <git:commit message="${dummy.commit.message}" revCommitIdProperty="testAdd.revcommit"/>
                        <git:rm>
                                <fileset dir="${testLocalRepo}" includes="*.txt"/>
                        </git:rm>
                        <git:commit message="${dummy.commit.message}" revCommitIdProperty="testRm.revcommit"/>
                        <git:uptodate failOnError="true"/>
                </git:git>
                <au:expectfailure>
                        <au:assertFileExists file="${testLocalRepoClone}/test.txt"/>
                </au:expectfailure>
        </target>

        <!-- git-add -->
        <target name="testAdd" description="Test git-add">
                <initLocalRepo/>
                <echo file="${testLocalRepo}/test.txt" message="test"/>

                <git:git directory="${testLocalRepo}" verbose="true" settingsRef="git.testing">
                        <git:add>
                                <fileset dir="${testLocalRepo}" includes="*.txt"/>
                        </git:add>
                        <git:commit message="${dummy.commit.message}" revCommitIdProperty="testAdd.revcommit"/>
                        <git:uptodate failOnError="true"/>
                </git:git>
        </target>

        <!-- git-commit -->
        <target name="testCommit" description="Test git-commit">
                <initLocalRepo/>
                <echo file="${testLocalRepo}/test.txt" message="test"/>

                <git:git directory="${testLocalRepo}" verbose="true" settingsRef="git.testing">
                        <git:add>
                                <fileset dir="${testLocalRepo}" includes="*.txt"/>
                        </git:add>
                        <git:commit message="${dummy.commit.message}" revCommitIdProperty="testAdd.revcommit"/>
                        <git:uptodate failOnError="true"/>
                </git:git>

                <echo file="${testLocalRepo}/test-fileset1.txt" message="test"/>
                <echo file="${testLocalRepo}/test-fileset2.txt" message="test"/>
                <git:git directory="${testLocalRepo}" verbose="true" settingsRef="git.testing">
                        <git:add>
                                <fileset dir="${testLocalRepo}" includes="test-fileset*.txt"/>
                        </git:add>
                        <git:commit message="${dummy.commit.message}" revCommitIdProperty="testAdd.revcommit">
                                <fileset dir="${testLocalRepo}" includes="test-fileset*.txt"/>
                        </git:commit>
                        <git:uptodate failOnError="true"/>
                </git:git>

                <au:expectfailure>
                        <git:git directory="${testLocalRepo}" verbose="true" settingsRef="git.testing">
                                <git:commit message="${dummy.commit.message}" only="test.txt"/>
                        </git:git>
                </au:expectfailure>

        </target>

        <!-- git-clean -->
        <target name="testClean" description="Test git-clean">
                <initLocalRepo/>
                <echo file="${testLocalRepo}/test.txt" message="test"/>

                <git:git directory="${testLocalRepo}" verbose="true" settingsRef="git.testing">
                        <git:clean/>
                        <git:uptodate failOnError="true"/>
                </git:git>

                <echo file="${testLocalRepo}/test.txt" message="test"/>

                <git:git directory="${testLocalRepo}" verbose="true" settingsRef="git.testing">
                        <git:clean paths="test.txt"/>
                        <git:uptodate failOnError="true"/>
                </git:git>
        </target>

        <!-- git-apply -->
        <target name="testApply" description="Test git-apply">
                <initLocalRepo/>

                <echo file="${testLocalRepo}/file.txt" message="test file"/>

                <git:git directory="${testLocalRepo}" verbose="true">
                        <git:apply updatedCountProperty="updatedCountProperty" patchfile="${dummy.patch.file}"/>
                </git:git>

                <au:assertTrue message="Only one file impacted by patch">
                        <equals arg1="${updatedCountProperty}" arg2="1"/>
                </au:assertTrue>
        </target>

        <!-- git-pull -->
        <target name="testPull" description="Test git-pull">
                <initLocalRepo/>

                <git:git directory="${testLocalRepoClone}" verbose="true">
                        <git:clone uri="file://${testLocalRepo}/.git" directory="${testLocalRepoClone}"/>
                </git:git>

                <echo file="${testLocalRepo}/file.txt" message="test file"/>
                <git:git directory="${testLocalRepo}" verbose="true" settingsRef="git.testing">
                        <git:add>
                                <fileset dir="${testLocalRepo}" includes="*.txt"/>
                        </git:add>
                        <git:commit message="${dummy.commit.message}"/>
                </git:git>

                <git:git directory="${testLocalRepoClone}" verbose="true">
                        <git:pull/>
                </git:git>

                <au:assertFileExists file="${testLocalRepoClone}/file.txt"/>
        </target>

        <!-- git-status -->
        <target name="testUpToDateFailure" description="Test git-status">
                <initLocalRepo/>

                <echo file="${testLocalRepo}/test.txt" message="test"/>

                <au:expectfailure>
                        <git:git directory="${testLocalRepo}" settingsRef="git.testing">
                                <git:uptodate failOnError="true" modificationExistProperty="${tree.modified.property}"/>
                        </git:git>
                </au:expectfailure>

                <au:assertPropertySet name="${tree.modified.property}"/>
                <au:assertPropertyEquals name="${tree.modified.property}" value="true"/>
        </target>

        <!-- git-init -->
        <target name="testInit" description="Test git-init">
                <initLocalRepo/>
                <au:assertFileExists file="${testLocalRepo}/.git/index"/>
        </target>

        <!-- git-reset -->
        <target name="testReset" description="Test git-reset">
                <initLocalRepo/>
                <echo file="${testLocalRepo}/test.txt" message="test"/>
                <git:git directory="${testLocalRepo}" verbose="true" settingsRef="git.testing">
                        <git:add>
                                <fileset dir="${testLocalRepo}" includes="*.txt"/>
                        </git:add>
                        <git:commit message="${dummy.commit.message}" revCommitIdProperty="testAdd.revcommit"/>
                        <git:uptodate failOnError="true"/>
                </git:git>

                <delete file="${testLocalRepo}/test.txt"/>
                <git:git directory="${testLocalRepo}" verbose="true" settingsRef="git.testing">
                        <git:reset mode="hard"/>
                        <git:uptodate failOnError="true"/>
                </git:git>
                <au:assertFileExists file="${testLocalRepo}/test.txt"/>
        </target>

</project>
